# This workflow will run tests and publish a package to npm on every push
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - run: npm ci
      - name: Run tests (if any)
        run: npm test || echo "No tests specified, continuing..."
        continue-on-error: true
  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Configure npm authentication
        run: |
          npm config set registry https://registry.npmjs.org/
          # Configure authentication for scoped packages
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          # Create .npmrc with proper configuration
          if [[ "$PACKAGE_NAME" == @* ]]; then
            # Extract scope from scoped package name (e.g., @deand-code-engine/node-red-contrib-odbc-with-pooling)
            PACKAGE_SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1)
            echo "${PACKAGE_SCOPE}:registry=https://registry.npmjs.org/" > ~/.npmrc
          else
            # For unscoped packages, create empty file
            touch ~/.npmrc
          fi
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" >> ~/.npmrc
          echo "Generated .npmrc configuration:"
          cat ~/.npmrc | sed 's/:[^:]*$/:***/'  # Show config without exposing token
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - name: Bump version for each commit
        run: |
          # Check if this is a manual initialization (workflow_dispatch) - use base version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual workflow trigger - checking if package exists..."
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            if npm view "$PACKAGE_NAME" version 2>/dev/null; then
              echo "Package exists - will bump version"
            else
              echo "Package doesn't exist - using base version for initial publish"
              exit 0  # Skip version bumping for initial publish
            fi
          fi
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Use build metadata (after +) for timestamp and commit SHA
          # Format: existing-version+build.timestamp.sha (e.g., 1-beta.0+build.20241031183037.abc1234)
          # This preserves the existing version while adding unique build info
          NEW_VERSION="${CURRENT_VERSION}+build.${TIMESTAMP}.${SHORT_SHA}"
          npm pkg set version="${NEW_VERSION}"
      - run: npm install
      - name: Verify npm authentication and package info
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package name: $PACKAGE_NAME"
          echo "Package version: $PACKAGE_VERSION"
          echo "Authenticated as: $(npm whoami)"
          echo "Checking if package exists..."
          if npm view "$PACKAGE_NAME" version 2>/dev/null; then
            echo "Package already exists on npm. Checking if you have publish access..."
            npm access ls-packages 2>/dev/null | grep -q "$PACKAGE_NAME" && echo "You have access" || echo "WARNING: Package exists but you may not have access"
          else
            echo "Package name is available (first publish)"
          fi
      - name: Publish to npm
        run: |
          # Try to publish, but handle the case where package doesn't exist (first publish)
          npm publish --access public || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "Publish failed. Common causes:"
              echo "1. Package name might be taken by another account"
              echo "2. npm token might not have publish permissions"
              echo "3. Authentication issue - verify npm_token secret is correct"
              exit $EXIT_CODE
            fi
            exit $EXIT_CODE
          }
