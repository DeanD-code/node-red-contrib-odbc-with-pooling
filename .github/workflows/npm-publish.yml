# This workflow will publish a package to npm on every push
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - run: npm ci
  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify npm token is set
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "ERROR: NPM_TOKEN secret is not set in GitHub repository secrets"
            echo "Please add NPM_TOKEN secret in: Settings > Secrets and variables > Actions"
            exit 1
          fi
          echo "✓ NPM_TOKEN secret is configured"
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      
      - name: Configure npm authentication
        run: |
          # Get package info
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Configuring authentication for package: $PACKAGE_NAME"
          
          # Create .npmrc file
          if [[ "$PACKAGE_NAME" == @* ]]; then
            # Extract scope from scoped package name
            PACKAGE_SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1)
            echo "Scoped package detected: $PACKAGE_SCOPE"
            
            # Set scope registry configuration
            npm config set "@${PACKAGE_SCOPE#@}:registry" https://registry.npmjs.org/
            
            # Configure auth token for the scope
            echo "${PACKAGE_SCOPE}:registry=https://registry.npmjs.org/" > ~/.npmrc
          else
            echo "Unscoped package detected"
            touch ~/.npmrc
          fi
          
          # Add authentication token
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" >> ~/.npmrc
          
          # Verify .npmrc contents (masked)
          echo "Generated .npmrc configuration:"
          cat ~/.npmrc | sed 's/:[^:]*$/:***/'
          
          # Verify authentication
          echo "Verifying npm authentication..."
          NPM_USER=$(npm whoami 2>&1)
          if [ $? -eq 0 ]; then
            echo "✓ Authenticated as: $NPM_USER"
          else
            echo "✗ Authentication failed: $NPM_USER"
            echo "Please verify:"
            echo "1. NPM_TOKEN secret is correct"
            echo "2. Token has 'publish' permissions"
            echo "3. Token belongs to the account that owns scope: ${PACKAGE_SCOPE:-N/A}"
            exit 1
          fi
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - name: Bump version for each commit
        run: |
          # Check if this is a manual initialization (workflow_dispatch) - use base version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual workflow trigger - checking if package exists..."
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            if npm view "$PACKAGE_NAME" version 2>/dev/null; then
              echo "Package exists - will bump version"
            else
              echo "Package doesn't exist - using base version for initial publish"
              exit 0  # Skip version bumping for initial publish
            fi
          fi
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Use build metadata (after +) for timestamp and commit SHA
          # Format: existing-version+build.timestamp.sha (e.g., 1-beta.0+build.20241031183037.abc1234)
          # This preserves the existing version while adding unique build info
          NEW_VERSION="${CURRENT_VERSION}+build.${TIMESTAMP}.${SHORT_SHA}"
          npm pkg set version="${NEW_VERSION}"
      - run: npm install
      - name: Verify package info and access
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          NPM_USER=$(npm whoami)
          
          echo "=== Package Information ==="
          echo "Package name: $PACKAGE_NAME"
          echo "Package version: $PACKAGE_VERSION"
          echo "NPM user: $NPM_USER"
          
          if [[ "$PACKAGE_NAME" == @* ]]; then
            PACKAGE_SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1)
            EXPECTED_USER="${PACKAGE_SCOPE#@}"
            echo "Package scope: $PACKAGE_SCOPE"
            echo "Expected user/org: $EXPECTED_USER"
            
            # Check if scope matches user
            if [[ "$NPM_USER" != "$EXPECTED_USER" ]] && [[ "$NPM_USER" != *"$EXPECTED_USER"* ]]; then
              echo "⚠️  WARNING: NPM user '$NPM_USER' may not match scope '$PACKAGE_SCOPE'"
              echo "For scoped packages, the npm user must own the scope."
            fi
          fi
          
          echo ""
          echo "Checking if package exists..."
          if npm view "$PACKAGE_NAME" version 2>/dev/null; then
            echo "✓ Package exists on npm"
            echo "Checking publish access..."
            if npm access ls-packages 2>/dev/null | grep -q "$PACKAGE_NAME"; then
              echo "✓ You have publish access to this package"
            else
              echo "⚠️  Package exists but you may not have publish access"
            fi
          else
            echo "Package does not exist (first publish)"
          fi
      - name: Publish to npm
        run: |
          # Try to publish, but handle the case where package doesn't exist (first publish)
          npm publish --access public || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "Publish failed. Common causes:"
              echo "1. Package name might be taken by another account"
              echo "2. npm token might not have publish permissions"
              echo "3. Authentication issue - verify npm_token secret is correct"
              exit $EXIT_CODE
            fi
            exit $EXIT_CODE
          }
