# This workflow will publish a package to npm on every push
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger from GitHub Actions UI
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - run: npm ci
  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify npm token is set
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "ERROR: NPM_TOKEN secret is not set in GitHub repository secrets"
            echo "Please add NPM_TOKEN secret in: Settings > Secrets and variables > Actions"
            exit 1
          fi
          echo "✓ NPM_TOKEN secret is configured"
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      
      - name: Configure npm authentication
        run: |
          # Get package info
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Configuring authentication for package: $PACKAGE_NAME"
          
          # Get the npmrc file location (setup-node sets NPM_CONFIG_USERCONFIG)
          NPMRC_FILE="${NPM_CONFIG_USERCONFIG:-$HOME/.npmrc}"
          echo "Using npmrc file: $NPMRC_FILE"
          
          # Create .npmrc file with proper configuration
          if [[ "$PACKAGE_NAME" == @* ]]; then
            # Extract scope from scoped package name
            PACKAGE_SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1)
            SCOPE_NAME="${PACKAGE_SCOPE#@}"
            echo "Scoped package detected: $PACKAGE_SCOPE"
            
            # Configure scope registry
            npm config set "@${SCOPE_NAME}:registry" https://registry.npmjs.org/
            
            # Add scope registry to npmrc file
            echo "${PACKAGE_SCOPE}:registry=https://registry.npmjs.org/" > "$NPMRC_FILE"
          else
            echo "Unscoped package detected"
            touch "$NPMRC_FILE"
          fi
          
          # Add authentication token
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_TOKEN}}" >> "$NPMRC_FILE"
          
          # Verify .npmrc contents (masked)
          echo "Generated .npmrc configuration:"
          cat "$NPMRC_FILE" | sed 's/:[^:]*$/:***/'
          
          # Show npm config to verify
          echo ""
          echo "npm config list:"
          npm config list | grep -E "(registry|@.*:registry)" || true
          
          # Verify authentication
          echo ""
          echo "Verifying npm authentication..."
          if NPM_USER=$(npm whoami 2>&1); then
            echo "✓ Authenticated as: $NPM_USER"
          else
            echo "✗ Authentication failed"
            echo "Error output: $NPM_USER"
            echo ""
            echo "Troubleshooting steps:"
            echo "1. Verify NPM_TOKEN secret is correct in GitHub repository settings"
            echo "2. Ensure token has 'Automation' type with 'publish' permissions"
            echo "3. Verify token belongs to account that owns scope: ${PACKAGE_SCOPE:-N/A}"
            echo "4. Check npmrc file contents:"
            cat "$NPMRC_FILE" | sed 's/:[^:]*$/:***/'
            exit 1
          fi
      - run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - name: Auto-increment version based on commits
        run: |
          # Check if this is a manual initialization (workflow_dispatch) - use base version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual workflow trigger - checking if package exists..."
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            if npm view "$PACKAGE_NAME" version 2>/dev/null; then
              echo "Package exists - will auto-increment version"
            else
              echo "Package doesn't exist - using base version for initial publish"
              exit 0  # Skip version bumping for initial publish
            fi
          fi
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the last commit message to determine version bump type
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $LAST_COMMIT_MSG"
          
          # Determine version bump based on conventional commits or commit message
          # Patterns: "fix:" or "bugfix:" = patch, "feat:" or "feature:" = minor, "BREAKING" = major
          VERSION_BUMP="patch"  # Default to patch
          
          if echo "$LAST_COMMIT_MSG" | grep -qiE "^(breaking|BREAKING|major)"; then
            VERSION_BUMP="major"
            echo "Detected: MAJOR version bump (breaking change)"
          elif echo "$LAST_COMMIT_MSG" | grep -qiE "^(feat|feature|add)"; then
            VERSION_BUMP="minor"
            echo "Detected: MINOR version bump (new feature)"
          elif echo "$LAST_COMMIT_MSG" | grep -qiE "^(fix|bugfix|patch|bug)"; then
            VERSION_BUMP="patch"
            echo "Detected: PATCH version bump (bug fix)"
          else
            # If no conventional commit pattern, default to patch or use build metadata
            echo "No conventional commit pattern found, using build metadata instead"
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            SHORT_SHA=$(git rev-parse --short HEAD)
            NEW_VERSION="${CURRENT_VERSION}+build.${TIMESTAMP}.${SHORT_SHA}"
            npm pkg set version="${NEW_VERSION}"
            echo "New version: $NEW_VERSION"
            exit 0
          fi
          
          # Extract base version (remove any build metadata or pre-release identifiers for incrementing)
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/+.*//' | sed 's/-.*//')
          
          # Temporarily set clean version for npm version command
          npm pkg set version="${BASE_VERSION}"
          
          # Increment version using npm version (but don't commit to git)
          npm version "$VERSION_BUMP" --no-git-tag-version
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
          
          # Optionally add build metadata
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION_WITH_BUILD="${NEW_VERSION}+build.${TIMESTAMP}.${SHORT_SHA}"
          npm pkg set version="${VERSION_WITH_BUILD}"
          echo "Final version with build metadata: $VERSION_WITH_BUILD"
      - run: npm install
      - name: Verify package info and access
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          NPM_USER=$(npm whoami)
          
          echo "=== Package Information ==="
          echo "Package name: $PACKAGE_NAME"
          echo "Package version: $PACKAGE_VERSION"
          echo "NPM user: $NPM_USER"
          
          if [[ "$PACKAGE_NAME" == @* ]]; then
            PACKAGE_SCOPE=$(echo "$PACKAGE_NAME" | cut -d'/' -f1)
            EXPECTED_USER="${PACKAGE_SCOPE#@}"
            echo "Package scope: $PACKAGE_SCOPE"
            echo "Expected user/org: $EXPECTED_USER"
            
            # Check if scope matches user
            if [[ "$NPM_USER" != "$EXPECTED_USER" ]] && [[ "$NPM_USER" != *"$EXPECTED_USER"* ]]; then
              echo "⚠️  WARNING: NPM user '$NPM_USER' may not match scope '$PACKAGE_SCOPE'"
              echo "For scoped packages, the npm user must own the scope."
            fi
          fi
          
          echo ""
          echo "Checking if package exists..."
          if npm view "$PACKAGE_NAME" version 2>/dev/null; then
            echo "✓ Package exists on npm"
            echo "Checking publish access..."
            if npm access ls-packages 2>/dev/null | grep -q "$PACKAGE_NAME"; then
              echo "✓ You have publish access to this package"
            else
              echo "⚠️  Package exists but you may not have publish access"
            fi
          else
            echo "Package does not exist (first publish)"
          fi
      - name: Publish to npm
        run: |
          # Try to publish, but handle the case where package doesn't exist (first publish)
          npm publish --access public || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 1 ]; then
              echo "Publish failed. Common causes:"
              echo "1. Package name might be taken by another account"
              echo "2. npm token might not have publish permissions"
              echo "3. Authentication issue - verify npm_token secret is correct"
              exit $EXIT_CODE
            fi
            exit $EXIT_CODE
          }
